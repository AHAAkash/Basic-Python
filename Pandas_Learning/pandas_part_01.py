# -*- coding: utf-8 -*-
"""Pandas_Part_01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TmDyY5Y2I8sWW07qGf5CzkV2EOXXCmvw

# **Pandas Introduction**
What is Pandas?

Pandas is a Python library used for working with data sets.
It has functions for analyzing, cleaning, exploring, and manipulating data.

# Why Use Pandas?
Pandas allows us to analyze big data and make conclusions based on statistical theories.

Pandas can clean messy data sets, and make them readable and relevant.

Relevant data is very important in data science.

The source code for Pandas is located at this github repository https://github.com/pandas-dev/pandas
"""

#Import Pandas
import pandas as pd
mydataset = {
  'cars': ["BMW", "Volvo", "Ford"],
  'passings': [3, 7, 2]
}
myvar = pd.DataFrame(mydataset)
print(myvar)

"""# **Pandas Series**

**What is a Series?**

A Pandas Series is like a column in a table. It is a one-dimensional array holding data of any type.
"""

import pandas as pd
a = [1, 7, 2]
list1 = pd.Series(a)
print(list1)

"""# Labels
If nothing else is specified, the values are labeled with their index number. First value has index 0, second value has index 1 etc.

This label can be used to access a specified value.
"""

print(list1[0])

# With the index argument, you can name your own labels.
import pandas as pd
a = [1, 7, 2]
myvar = pd.Series(a, index = ["x", "y", "z"])
print(myvar)

print(myvar["y"])

"""# Key/Value Objects as Series
You can also use a key/value object, like a dictionary, when creating a Series.
"""

import pandas as pd

calories = {"day1": 420, "day2": 380, "day3": 390}
list1 = pd.Series(calories)
print(list1)

import pandas as pd

calories = {"day1": 420, "day2": 380, "day3": 390}
list1 = pd.Series(calories, index = ["day1", "day2"])
print(list1)

"""# **DataFrames**
Data sets in Pandas are usually multi-dimensional tables, called DataFrames.

Series is like a column, a DataFrame is the whole table.
"""

import pandas as pd
data= {
    "calories": [420, 380, 390],
    "duration": [50, 40, 45],
    "lose_cal": [10, 20, 30]
}

df = pd.DataFrame(data)
print(df)

"""**Locate Row**

As you can see from the result above, the DataFrame is like a table with rows and columns.

Pandas use the loc attribute to return one or more specified row(s)
"""

print(df.loc[0])

print(df.loc[[0, 1]])

"""# **Load Files Into a DataFrame**
If your data sets are stored in a file, Pandas can load them into a DataFrame.
"""

import pandas as pd

#df = pd.read_csv('data.csv')
#df = pd.read_json('data.json')
#df = pd.read_excel('data.xlsx')
print(df)

"""# **Read CSV Files**
A simple way to store big data sets is to use CSV files (comma separated files).

CSV files contains plain text and is a well know format that can be read by everyone including Pandas.

In our examples we will be using a CSV file called 'data.csv'.

[link text](https://Download data.csv. )
"""

import pandas as pd

df = pd.read_csv('/content/data.csv')
print(df.to_string()) # use to_string() to print the entire DataFrame.

import pandas as pd

df = pd.read_csv('/content/data.csv')  # Without to_string method
print(df)